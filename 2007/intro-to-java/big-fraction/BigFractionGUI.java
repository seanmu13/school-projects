//-----------------------------------------------------------------------------------------------------------------------
//-------------------------------------------Assignment 4 - BigFraction GUI----------------------------------------------
//-----------------------------------------------------------------------------------------------------------------------

/*
 * BigFractionGUI.java
 *
 * Created on November 8, 2006, 8:35 PM
 */

//package BigFractionGUI;
import java.math.*;

public class BigFractionGUI extends javax.swing.JFrame {

    /** Creates new form BigFractionGUI */
    public BigFractionGUI() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        numA = new javax.swing.JTextField();
        denA = new javax.swing.JTextField();
        operator = new javax.swing.JTextField();
        numB = new javax.swing.JTextField();
        denB = new javax.swing.JTextField();
        numRes = new javax.swing.JTextField();
        denRes = new javax.swing.JTextField();
        numMem = new javax.swing.JTextField();
        denMem = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        logText = new javax.swing.JTextArea();
        multiply = new javax.swing.JButton();
        minus = new javax.swing.JButton();
        plus = new javax.swing.JButton();
        divide = new javax.swing.JButton();
        clearA = new javax.swing.JButton();
        clearB = new javax.swing.JButton();
        powAB = new javax.swing.JButton();
        decimal = new javax.swing.JButton();
        clearMem = new javax.swing.JButton();
        store = new javax.swing.JButton();
        recall = new javax.swing.JButton();
        clearAll = new javax.swing.JButton();
        quotRem = new javax.swing.JButton();
        AcompareToB = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();

        getContentPane().setLayout(new java.awt.GridBagLayout());

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("BigFraction GUI");
        setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        setForeground(java.awt.Color.blue);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.ipadx = 139;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 0, 0);
        getContentPane().add(numA, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.ipadx = 139;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        getContentPane().add(denA, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.ipadx = 13;
        gridBagConstraints.ipady = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(20, 18, 0, 0);
        getContentPane().add(operator, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.ipadx = 139;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 20, 0, 0);
        getContentPane().add(numB, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.ipadx = 139;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
        getContentPane().add(denB, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 15;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.ipadx = 138;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 20, 0, 2);
        getContentPane().add(numRes, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 15;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.ipadx = 138;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 2);
        getContentPane().add(denRes, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 15;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.ipadx = 138;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 20, 0, 2);
        getContentPane().add(numMem, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 15;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.ipadx = 138;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(7, 20, 0, 2);
        getContentPane().add(denMem, gridBagConstraints);

        logText.setColumns(20);
        logText.setRows(5);
        jScrollPane1.setViewportView(logText);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.gridwidth = 20;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 461;
        gridBagConstraints.ipady = 161;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(7, 0, 0, 0);
        getContentPane().add(jScrollPane1, gridBagConstraints);

        multiply.setText("*");
        multiply.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                multiplyHandler(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.ipadx = 31;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 1, 0, 0);
        getContentPane().add(multiply, gridBagConstraints);

        minus.setText("-");
        minus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                minusHandler(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.ipadx = 33;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(7, 0, 0, 0);
        getContentPane().add(minus, gridBagConstraints);

        plus.setText("+");
        plus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                plusHandler(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.ipadx = 29;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        getContentPane().add(plus, gridBagConstraints);

        divide.setText("/");
        divide.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                divideHandler(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.ipadx = 33;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(7, 1, 0, 0);
        getContentPane().add(divide, gridBagConstraints);

        clearA.setText("Clr A");
        clearA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearAHandler(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.ipadx = 15;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(7, 0, 0, 0);
        getContentPane().add(clearA, gridBagConstraints);

        clearB.setText("Clr B");
        clearB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearBHandler(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.ipadx = 15;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(7, 1, 0, 0);
        getContentPane().add(clearB, gridBagConstraints);

        powAB.setText("A^B");
        powAB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                powABHandler(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.ipadx = 17;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 10, 0, 0);
        getContentPane().add(powAB, gridBagConstraints);

        decimal.setText("Decimal");
        decimal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                decimalHandler(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.ipadx = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(7, 10, 0, 0);
        getContentPane().add(decimal, gridBagConstraints);

        clearMem.setText("Clr Mem");
        clearMem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearMemHandler(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.ipadx = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(7, 9, 0, 0);
        getContentPane().add(clearMem, gridBagConstraints);

        store.setText("Store");
        store.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                storeHandler(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.ipadx = 11;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 10, 0, 0);
        getContentPane().add(store, gridBagConstraints);

        recall.setText("Recall");
        recall.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                recallHandler(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.ipadx = 9;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(7, 10, 0, 0);
        getContentPane().add(recall, gridBagConstraints);

        clearAll.setText("Clr All");
        clearAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearAllHandler(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(7, 10, 0, 0);
        getContentPane().add(clearAll, gridBagConstraints);

        quotRem.setText("Quot/Rem    ");
        quotRem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quotRemHandler(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 9;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 6;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.ipadx = -1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 9, 0, 0);
        getContentPane().add(quotRem, gridBagConstraints);

        AcompareToB.setText("A > B ?");
        AcompareToB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AcompareToBHandler(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 9;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.gridwidth = 6;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.ipadx = 13;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(7, 9, 0, 0);
        getContentPane().add(AcompareToB, gridBagConstraints);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 12));
        jLabel1.setText("A");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 0, 0, 0);
        getContentPane().add(jLabel1, gridBagConstraints);

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 12));
        jLabel2.setText("Operations");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        getContentPane().add(jLabel2, gridBagConstraints);

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 12));
        jLabel3.setText("B");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 50, 0, 0);
        getContentPane().add(jLabel3, gridBagConstraints);

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 12));
        jLabel4.setText("Memory");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 15;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 20, 0, 0);
        getContentPane().add(jLabel4, gridBagConstraints);

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 12));
        jLabel5.setText("Result");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 16;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 0, 0);
        getContentPane().add(jLabel5, gridBagConstraints);

        jLabel6.setText("=");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 13;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.ipady = -4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 20, 0, 0);
        getContentPane().add(jLabel6, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

//------------------------------------------------------------------------------------------------------------------------------
//--------------------------------------------------AcompareToBHandler----------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------------------

    private void AcompareToBHandler(java.awt.event.ActionEvent evt) {

		if(numA.getText().equals("")) numA.setText("1");
		if(numB.getText().equals("")) numB.setText("1");
		if(denA.getText().equals("")) denA.setText("1");
		if(denB.getText().equals("")) denB.setText("1");

		String A1 = new String(numA.getText());
		String A2 = new String(denA.getText());
		String B1 = new String(numB.getText());
		String B2 = new String(denB.getText());

		if(A1.indexOf('.')!=-1) A1 = 0 + A1.substring(0,A1.indexOf('.'));
		if(A2.indexOf('.')!=-1) A2 = 0 + A2.substring(0,A2.indexOf('.'));
		if(B1.indexOf('.')!=-1) B1 = 0 + B1.substring(0,B1.indexOf('.'));
		if(B2.indexOf('.')!=-1) B2 = 0 + B2.substring(0,B2.indexOf('.'));

		BigFraction A = new BigFraction(A1,A2);
		BigFraction B = new BigFraction(B1,B2);

		numA.setText("" + A.numerator());
		denA.setText("" + A.denominator());
		numB.setText("" + B.numerator());
		denB.setText("" + B.denominator());

		if(denA.getText().equals("0") || denB.getText().equals("0")){
			numRes.setText("Undefined");
			denRes.setText("");
			logText.setText(logText.getText() + "\n------------------------------------------------------------\nWarning! - Undefined: Cannot Divide By Zero!\n");
		}
		else{

			if(A.compareTo(B)>0){
				numRes.setText("True: A > B");
				logText.setText(logText.getText() + "\n-----------------\n True: A > B \n\n A(reduced):\n" + A + "\nB(reduced):\n" + B + "\n");
			}
			else if (A.compareTo(B)<0){
				numRes.setText("False: A < B");
				logText.setText(logText.getText() + "\n-----------------\n False: A < B \n\n A(reduced):\n" + A + "\nB(reduced):\n" + B + "\n");
			}
			else{
				numRes.setText("False: A = B");
				logText.setText(logText.getText() + "\n-----------------\n False: A = B \n\n A(reduced):\n" + A + "\nB(reduced):\n" + B + "\n");
			}
		}

		denRes.setText("");
		operator.setText(">");

    }

//------------------------------------------------------------------------------------------------------------------------------
//-----------------------------------------------------quotRemHandler-----------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------------------

    private void quotRemHandler(java.awt.event.ActionEvent evt) {

		if(numA.getText().equals("")) numA.setText("1");
		if(denA.getText().equals("")) denA.setText("1");

		String A1 = new String(numA.getText());
		String A2 = new String(denA.getText());

		if(A1.indexOf('.')!=-1) A1 = 0 + A1.substring(0,A1.indexOf('.'));
		if(A2.indexOf('.')!=-1) A2 = 0 + A2.substring(0,A2.indexOf('.'));

		BigFraction A = new BigFraction(A1,A2);

		numA.setText("" + A.numerator());
		denA.setText("" + A.denominator());

		if(denA.getText().equals("0") || denB.getText().equals("0")){
			numRes.setText("Undefined");
			denRes.setText("");
			logText.setText(logText.getText() + "\n------------------------------------------------------------\nWarning! - Undefined: Cannot Divide By Zero!\n");
		}
		else{

			BigInteger Ab = new BigInteger("" + A.divideAndRemainder()[0]);
			BigInteger Bb = new BigInteger("" + A.divideAndRemainder()[1]);

			numRes.setText("Quotient(A):  " + Ab);
			denRes.setText("Remainder(A):  " + Bb);
			logText.setText(logText.getText() + "\n--------------------------------------------------------------\nQuotient (Numerator A / Denominator A): " + Ab + "\n");
			logText.setText(logText.getText() + "\nRemainder (Numerator A / Denominator A): " + Bb + "\n");
		}
    }

//------------------------------------------------------------------------------------------------------------------------------
//--------------------------------------------------------clearAllHandler-------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------------------

    private void clearAllHandler(java.awt.event.ActionEvent evt) {

		numA.setText("");
		denA.setText("");
		numB.setText("");
		denB.setText("");
		numRes.setText("");
		denRes.setText("");
		numMem.setText("");
		denMem.setText("");
		operator.setText("");
		logText.setText("");
    }

//------------------------------------------------------------------------------------------------------------------------------
//--------------------------------------------------------recallHandler---------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------------------

    private void recallHandler(java.awt.event.ActionEvent evt) {

		if(numMem.getText().equals("") || denMem.getText().equals("") || numMem.getText().charAt(0)=='Q'){
			logText.setText(logText.getText() + "\n---------------------------------------------------------\nWarning! - Cannot Recall Data In Memory\n");
		}
		else{

			numA.setText(numMem.getText());
			denA.setText(denMem.getText());

			operator.setText("");
			numRes.setText("");
			denRes.setText("");
			logText.setText(logText.getText() + "\n----------------------------------------------------\nRecall Memory and Place In Fraction A\n");
		}
    }

//------------------------------------------------------------------------------------------------------------------------------
//-----------------------------------------------------------storeHandler-------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------------------

    private void storeHandler(java.awt.event.ActionEvent evt) {

		if(numRes.getText().equals("") && denRes.getText().equals(""))
			logText.setText(logText.getText() + "\n------------------------------------------------------------\nWarning! - Cannot Store Data In Memory\n");
		else{
			numMem.setText(numRes.getText());
			denMem.setText(denRes.getText());
			logText.setText(logText.getText() + "\n--------------------------------\nStore Result in Memory\n");
		}
    }

//------------------------------------------------------------------------------------------------------------------------------
//---------------------------------------------------------clearMemHandler------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------------------

    private void clearMemHandler(java.awt.event.ActionEvent evt) {

		numMem.setText("");
		denMem.setText("");
		logText.setText(logText.getText() + "\n--------------------\nClear Memory\n");
    }

//------------------------------------------------------------------------------------------------------------------------------
//--------------------------------------------------------decimalHandler--------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------------------

    private void decimalHandler(java.awt.event.ActionEvent evt) {

		if(numRes.getText().equals("") || denRes.getText().equals("") || numRes.getText().charAt(0)=='Q' || numRes.getText().charAt(0)=='F'){
			logText.setText(logText.getText() + "\n------------------------------------------------------------------------------------------------------\nWarning! - Cannot Convert Result To Decimal or Result Is Already Decimal\n");
		}
		else{

			BigFraction res = new BigFraction(numRes.getText(),denRes.getText());

			numRes.setText("" + res.doubleValue());
			denRes.setText("");
			logText.setText(logText.getText() + "\n----------------------------------------\n Decimal Value of Result: " + res.doubleValue() + "\n");
		}
    }

//------------------------------------------------------------------------------------------------------------------------------
//---------------------------------------------------------powABHandler---------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------------------

    private void powABHandler(java.awt.event.ActionEvent evt) {

		if(numA.getText().equals("")) numA.setText("1");
		if(numB.getText().equals("")) numB.setText("1");
		if(denA.getText().equals("")) denA.setText("1");
		if(denB.getText().equals("")) denB.setText("1");

		if(denA.getText().equals("0") || denB.getText().equals("0")){
			numRes.setText("Undefined");
			denRes.setText("");
			logText.setText(logText.getText() + "\n------------------------------------------------------------\nWarning! - Undefined: Cannot Divide By Zero!\n");
		}
		else{

			String A1 = new String(numA.getText());
			String A2 = new String(denA.getText());
			String B1 = new String(numB.getText());
			String B2 = new String(denB.getText());

			if(A1.indexOf('.')!=-1) A1 = 0 + A1.substring(0,A1.indexOf('.'));
			if(A2.indexOf('.')!=-1) A2 = 0 + A2.substring(0,A2.indexOf('.'));
			if(B1.indexOf('.')!=-1) B1 = 0 + B1.substring(0,B1.indexOf('.'));
			if(B2.indexOf('.')!=-1) B2 = 0 + B2.substring(0,B2.indexOf('.'));

			BigFraction A = new BigFraction(A1,A2);
			BigFraction B = new BigFraction(B1,B2);

			numA.setText("" + A.numerator());
			denA.setText("" + A.denominator());

			numB.setText("" + (int)B.doubleValue());
			denB.setText("");
			logText.setText(logText.getText() + "\n-------------------------------------------------\nConverts Fraction B to Integer Value\n");

			int top = Integer.parseInt(numB.getText());

			numRes.setText("" + (A.pow(top)).numerator());
			denRes.setText("" + (A.pow(top)).denominator());

			BigFraction Res = new BigFraction(numRes.getText(),denRes.getText());

			logText.setText(logText.getText() + "\n----------------\nFraction A:\n" + A +"\nraised to the " + top + " power is:\n" + Res +"\n");
		}

		operator.setText("^");
    }

//------------------------------------------------------------------------------------------------------------------------------
//--------------------------------------------------------multiplyHandler-------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------------------

    private void multiplyHandler(java.awt.event.ActionEvent evt) {

		if(numA.getText().equals("")) numA.setText("1");
		if(numB.getText().equals("")) numB.setText("1");
		if(denA.getText().equals("")) denA.setText("1");
		if(denB.getText().equals("")) denB.setText("1");

		String A1 = new String(numA.getText());
		String A2 = new String(denA.getText());
		String B1 = new String(numB.getText());
		String B2 = new String(denB.getText());

		if(A1.indexOf('.')!=-1) A1 = 0 + A1.substring(0,A1.indexOf('.'));
		if(A2.indexOf('.')!=-1) A2 = 0 + A2.substring(0,A2.indexOf('.'));
		if(B1.indexOf('.')!=-1) B1 = 0 + B1.substring(0,B1.indexOf('.'));
		if(B2.indexOf('.')!=-1) B2 = 0 + B2.substring(0,B2.indexOf('.'));

		BigFraction A = new BigFraction(A1,A2);
		BigFraction B = new BigFraction(B1,B2);
		BigFraction C = A.multiply(B);

		numA.setText("" + A.numerator());
		denA.setText("" + A.denominator());
		numB.setText("" + B.numerator());
		denB.setText("" + B.denominator());

		if(denA.getText().equals("0") || denB.getText().equals("0")){
			numRes.setText("Undefined");
			denRes.setText("");
			logText.setText(logText.getText() + "\n------------------------------------------------------------\nWarning! - Undefined: Cannot Divide By Zero!\n");
		}
		else{
			numRes.setText("" + C.numerator());
			denRes.setText("" + C.denominator());
			logText.setText(logText.getText() + "\n----------------\nFraction A:\n" + A +"\nmultiplied by Fraction B\n" + B + "\nResult: A*B:\n" + C +"\n");
		}

		operator.setText("*");
    }

//------------------------------------------------------------------------------------------------------------------------------
//--------------------------------------------------------divideHandler---------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------------------

    private void divideHandler(java.awt.event.ActionEvent evt) {

		if(numA.getText().equals("")) numA.setText("1");
		if(numB.getText().equals("")) numB.setText("1");
		if(denA.getText().equals("")) denA.setText("1");
		if(denB.getText().equals("")) denB.setText("1");

		String A1 = new String(numA.getText());
		String A2 = new String(denA.getText());
		String B1 = new String(numB.getText());
		String B2 = new String(denB.getText());

		if(A1.indexOf('.')!=-1) A1 = 0 + A1.substring(0,A1.indexOf('.'));
		if(A2.indexOf('.')!=-1) A2 = 0 + A2.substring(0,A2.indexOf('.'));
		if(B1.indexOf('.')!=-1) B1 = 0 + B1.substring(0,B1.indexOf('.'));
		if(B2.indexOf('.')!=-1) B2 = 0 + B2.substring(0,B2.indexOf('.'));

		BigFraction A = new BigFraction(A1,A2);
		BigFraction B = new BigFraction(B1,B2);
		BigFraction C = A.divide(B);

		numA.setText("" + A.numerator());
		denA.setText("" + A.denominator());
		numB.setText("" + B.numerator());
		denB.setText("" + B.denominator());

		if(denA.getText().equals("0") || numB.getText().equals("0")){
			numRes.setText("Undefined");
			denRes.setText("");
			logText.setText(logText.getText() + "\n------------------------------------------------------------\nWarning! - Undefined: Cannot Divide By Zero!\n");
		}
		else{
			numRes.setText("" + C.numerator());
			denRes.setText("" + C.denominator());
			logText.setText(logText.getText() + "\n----------------\nFraction A:\n" + A +"\ndivided by Fraction B\n" + B + "\nResult: A/B:\n" + C +"\n");
		}

		operator.setText("/");
    }

//------------------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------clearBHandler-------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------------------

    private void clearBHandler(java.awt.event.ActionEvent evt) {

		numB.setText("");
		denB.setText("");
		logText.setText(logText.getText() + "\n----------------------\nClear Fraction B\n");
    }

//------------------------------------------------------------------------------------------------------------------------------
//--------------------------------------------------------clearAHandler---------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------------------

    private void clearAHandler(java.awt.event.ActionEvent evt) {

		numA.setText("");
		denA.setText("");
		logText.setText(logText.getText() + "\n----------------------\nClear Fraction A\n");
    }

//------------------------------------------------------------------------------------------------------------------------------
//--------------------------------------------------------minusHandler----------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------------------

    private void minusHandler(java.awt.event.ActionEvent evt) {

		if(numA.getText().equals("")) numA.setText("1");
		if(numB.getText().equals("")) numB.setText("1");
		if(denA.getText().equals("")) denA.setText("1");
		if(denB.getText().equals("")) denB.setText("1");

		String A1 = new String(numA.getText());
		String A2 = new String(denA.getText());
		String B1 = new String(numB.getText());
		String B2 = new String(denB.getText());

		if(A1.indexOf('.')!=-1) A1 = 0 + A1.substring(0,A1.indexOf('.'));
		if(A2.indexOf('.')!=-1) A2 = 0 + A2.substring(0,A2.indexOf('.'));
		if(B1.indexOf('.')!=-1) B1 = 0 + B1.substring(0,B1.indexOf('.'));
		if(B2.indexOf('.')!=-1) B2 = 0 + B2.substring(0,B2.indexOf('.'));

		BigFraction A = new BigFraction(A1,A2);
		BigFraction B = new BigFraction(B1,B2);
		BigFraction C = A.subtract(B);

		numA.setText("" + A.numerator());
		denA.setText("" + A.denominator());
		numB.setText("" + B.numerator());
		denB.setText("" + B.denominator());

		if(denA.getText().equals("0") || numB.getText().equals("0")){
			numRes.setText("Undefined");
			denRes.setText("");
			logText.setText(logText.getText() + "\n------------------------------------------------------------\nWarning! - Undefined: Cannot Divide By Zero!\n");
		}
		else{
			numRes.setText("" + C.numerator());
			denRes.setText("" + C.denominator());
			logText.setText(logText.getText() + "\n----------------\nFraction A:\n" + A +"\nminus Fraction B\n" + B + "\nResult: A-B:\n" + C +"\n");
		}

		operator.setText("-");
    }

//------------------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------plusHandler---------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------------------

    private void plusHandler(java.awt.event.ActionEvent evt) {

		if(numA.getText().equals("")) numA.setText("1");
		if(numB.getText().equals("")) numB.setText("1");
		if(denA.getText().equals("")) denA.setText("1");
		if(denB.getText().equals("")) denB.setText("1");

		String A1 = new String(numA.getText());
		String A2 = new String(denA.getText());
		String B1 = new String(numB.getText());
		String B2 = new String(denB.getText());

		if(A1.indexOf('.')!=-1) A1 = 0 + A1.substring(0,A1.indexOf('.'));
		if(A2.indexOf('.')!=-1) A2 = 0 + A2.substring(0,A2.indexOf('.'));
		if(B1.indexOf('.')!=-1) B1 = 0 + B1.substring(0,B1.indexOf('.'));
		if(B2.indexOf('.')!=-1) B2 = 0 + B2.substring(0,B2.indexOf('.'));

		BigFraction A = new BigFraction(A1,A2);
		BigFraction B = new BigFraction(B1,B2);
		BigFraction C = A.add(B);

		numA.setText("" + A.numerator());
		denA.setText("" + A.denominator());
		numB.setText("" + B.numerator());
		denB.setText("" + B.denominator());

		if(denA.getText().equals("0") || numB.getText().equals("0")){
			numRes.setText("Undefined");
			denRes.setText("");
			logText.setText(logText.getText() + "\n------------------------------------------------------------\nWarning! - Undefined: Cannot Divide By Zero!\n");
		}
		else{
			numRes.setText("" + C.numerator());
			denRes.setText("" + C.denominator());
			logText.setText(logText.getText() + "\n----------------\nFraction A:\n" + A +"\nadded to Fraction B\n" + B + "\nResult: A+B:\n" + C +"\n");
		}

		operator.setText("+");
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new BigFractionGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AcompareToB;
    private javax.swing.JButton clearA;
    private javax.swing.JButton clearAll;
    private javax.swing.JButton clearB;
    private javax.swing.JButton clearMem;
    private javax.swing.JButton decimal;
    private javax.swing.JTextField denA;
    private javax.swing.JTextField denB;
    private javax.swing.JTextField denMem;
    private javax.swing.JTextField denRes;
    private javax.swing.JButton divide;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea logText;
    private javax.swing.JButton minus;
    private javax.swing.JButton multiply;
    private javax.swing.JTextField numA;
    private javax.swing.JTextField numB;
    private javax.swing.JTextField numMem;
    private javax.swing.JTextField numRes;
    private javax.swing.JTextField operator;
    private javax.swing.JButton plus;
    private javax.swing.JButton powAB;
    private javax.swing.JButton quotRem;
    private javax.swing.JButton recall;
    private javax.swing.JButton store;
    // End of variables declaration//GEN-END:variables

}
